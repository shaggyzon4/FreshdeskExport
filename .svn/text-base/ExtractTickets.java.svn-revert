import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.AuthCache;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.CredentialsProvider;
import org.apache.http.client.HttpClient;
import org.apache.http.client.config.AuthSchemes;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.methods.RequestBuilder;
import org.apache.http.client.protocol.HttpClientContext;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.auth.AuthSchemeBase;
import org.apache.http.impl.auth.BasicScheme;
import org.apache.http.impl.client.BasicAuthCache;
import org.apache.http.impl.client.BasicCredentialsProvider;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;

import com.google.gson.stream.*;	
public class ExtractTickets {
	HttpClientContext hccContext;
	RequestBuilder reqBuilder;
	RequestConfig.Builder rcBuilder;
	HttpClientBuilder hcBuilder; 
	final static String apiEndPoint =  "https://eagltd.freshdesk.com";
	public static void main(String args[]) {
		ExtractTickets et = new ExtractTickets();
		try {
			et.authenticate("fsCFCxAZluDV8ZXsKc5M",apiEndPoint);
			et.extractTickets();
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (URISyntaxException e) {
			e.printStackTrace();
		} catch (ClientProtocolException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	private void authenticate(String apiToken, String apiEndpoint) throws MalformedURLException, URISyntaxException {
		 	hcBuilder = HttpClientBuilder.create();
		 	reqBuilder = RequestBuilder.post();
	        rcBuilder = RequestConfig.custom();
	        URL url = new URL(apiEndpoint);
	        final String urlHost = url.getHost();
	        final int urlPort = url.getPort();
	        final String urlProtocol = url.getProtocol();
	        

	        reqBuilder.setUri(url.toURI());
	        
	        // Authentication:
	        List<String> authPrefs = new ArrayList<>();
	        authPrefs.add(AuthSchemes.BASIC);
	        rcBuilder.setTargetPreferredAuthSchemes(authPrefs);
	        CredentialsProvider credsProvider = new BasicCredentialsProvider();
	        credsProvider.setCredentials(
	                new AuthScope(urlHost, urlPort, AuthScope.ANY_REALM),
	                new UsernamePasswordCredentials(apiToken, "fsCFCxAZluDV8ZXsKc5M"));
	        hcBuilder.setDefaultCredentialsProvider(credsProvider);
	        AuthCache authCache = new BasicAuthCache();
	        AuthSchemeBase authScheme = new BasicScheme();
	        authCache.put(new HttpHost(urlHost, urlPort, urlProtocol), authScheme);
	        hccContext = HttpClientContext.create();
	        hccContext.setAuthCache(authCache);

	}
	
	public void extractTickets() throws ClientProtocolException, IOException {

        RequestConfig rc = rcBuilder.build();
        reqBuilder.setConfig(rc);
        //HttpGet request = new HttpGet(apiEndPoint + "/helpdesk/tickets/filter/all_tickets?format=json&page=48");
        HttpGet request = new HttpGet(apiEndPoint + "/helpdesk/tickets/2796.json");
        HttpClient hc = hcBuilder.build();
        HttpResponse response = hc.execute(request, hccContext);
        
        

        HttpEntity body = response.getEntity();
        InputStream is = body.getContent();
        
        BufferedReader br = new BufferedReader(new InputStreamReader(is, Charset.forName("utf-8")));
        //readJSONresult(br);
       String line;
        StringBuilder sb = new StringBuilder();
        while((line=br.readLine())!=null) {
            sb.append(line);
        }
        
        //System.out.println("Body:\n");
        System.out.println(sb.toString());
        
	}
	
	private void readJSONresult(Reader JSONresult) throws IOException {
		JsonReader jr = new JsonReader(JSONresult);
		//List<Message> messages = new ArrayList<Message>();

	     jr.beginArray();
	     while (jr.hasNext()) {
	    	 jr.beginObject();
	    	 while (jr.hasNext()) {
	    		 
	    	       String name = jr.nextName();
	    	       if (name.equals("display_id")) {
	    	         //id = jr.nextLong();
	    	    	   System.out.println(jr.nextLong() + "|");
	    	       } else if (name.equals("created_at")) {
	    	         
	    	       } else if (name.equals("deleted")) {
	    	         
	    	       } else if (name.equals("delta")) {
		    	         
	    	       } else if (name.equals("description")) {
		    	         
	    	       } else if (name.equals("description_html")) {
		    	         
	    	       } else if (name.equals("due_by")) {
		    	         
	    	       } else if (name.equals("email_config_id")) {
		    	         
	    	       } else if (name.equals("frDueBy")) {
		    	         
	    	       } else if (name.equals("fr_escalated")) {
		    	         
	    	       } else if (name.equals("group_id")) {
		    	         
	    	       } else if (name.equals("id")) {
		    	         
	    	       } else if (name.equals("isescalated")) {
		    	         
	    	       } else if (name.equals("owner_id")) {
		    	         
	    	       } else if (name.equals("priority")) {
		    	         
	    	       } else if (name.equals("requester_id")) {
		    	         
	    	       } else if (name.equals("responder_id")) {
		    	         
	    	       } else if (name.equals("source")) {
		    	         
	    	       } else if (name.equals("spam")) {
		    	         
	    	       } else if (name.equals("status")) {
		    	         
	    	       } else if (name.equals("subject")) {
		    	         
	    	       } else if (name.equals("ticket_type")) {
		    	         
	    	       } else if (name.equals("to_email")) {
		    	         
	    	       } else if (name.equals("trained")) {
		    	         
	    	       } else if (name.equals("updated_at")) {
		    	         
	    	       } else if (name.equals("urgent")) {
		    	         
	    	       } else if (name.equals("status_name")) {
		    	         
	    	       } else if (name.equals("requester_status_name")) {
		    	         
	    	       } else if (name.equals("priority_name")) {
		    	         
	    	       } else if (name.equals("source_name")) {
		    	         
	    	       } else if (name.equals("requester_name")) {
		    	         
	    	       } else if (name.equals("responder_name")) {
		    	         
	    	       } else if (name.equals("product_id")) {
		    	         
	    	       } else if (name.equals("custom_field")) {
		    	         
	    	       }
	    	       else {
	    	         jr.skipValue();
	    	       }
	    	     }
	    	     jr.endObject();
	     }
	     jr.endArray();
	}
}
